/*****
题目描述

给定一个非负整数，用k个乘号将其分割，使得乘积最大。
例如：在整数12345中插入两个乘号，有以下插入法：
1*2*345 1*23*45 1*234*5
12*3*45 12*34*5
123*4*5
其中最大值是123*4*5 = 2460

关于输入

一行两个非负整数，非负整数s（s ≦ 10^9）和乘号的个数k（0 ≦ k < s的位数）。
输入保证，如果按题目要求的乘法操作，不会使int发生溢出。

关于输出

一行一个整数，即乘积的最大值

例子输入

12345 2

例子输出

2460
*****/

动规：
#include<iostream>
#include<vector>
#include<algorithm>
#include<cmath>
using namespace std;

int main() {
	int x,k; cin >> x>>k;
	vector<int>num;
	
	while (x) {
		num.push_back(x % 10);
		x /= 10;
	}
	num.push_back(0);
	reverse(num.begin(), num.end());
	
	int n = num.size()-1;
	//for (int i = 0; i <= n; i++) cout << num[i] << " ";
	vector<vector<int>>dp(n+1, vector<int>(k+2,0));
	for (int i = 1; i <= n; i++) {
		int digit = 0;
		for (int j = 0;i-j>=1;j++)
			digit += num[i - j] * pow(10, j);
		dp[i][1] = digit;
	}
	for (int i = 2; i <= n; i++) {
		for (int h = 2; h <= i&&h<=k+1 ; h++) {
			int Max = 0;
			for (int j = 1; j <= i+1-h; j++) {
				int digit = 0;
				for (int m = 0; m <= j-1; m++) {
					digit += num[i - m] * pow(10, m);
				}
				Max = max(Max, dp[i - j][h-1] * digit);
			}
			dp[i][h] = Max;
		}
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <=k+1; j++) cout << dp[i][j] << " ";
		cout << endl;
	}
}
