计算字符串距离
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
对于两个不同的字符串，我们有一套操作方法来把他们变得相同，具体方法为：
修改一个字符（如把“a”替换为“b”）
删除一个字符（如把“traveling”变为“travelng”）

比如对于“abcdefg”和“abcdef”两个字符串来说，我们认为可以通过增加/减少一个“g”的方式来达到目的。无论增加还是减少“g”，我们都仅仅需要一次操作。我们把这个操作所需要的次数定义为两个字符串的距离。
给定任意两个字符串，写出一个算法来计算出他们的距离。
输入
第一行有一个整数n。表示测试数据的组数，
接下来共n行，每行两个字符串，用空格隔开。表示要计算距离的两个字符串
字符串长度不超过1000。
输出
针对每一组测试数据输出一个整数，值为两个字符串的距离。
样例输入
3
abcdefg  abcdef
ab ab
mnklj jlknm
样例输出
1
0
4

#include<iostream>
#include<vector>
using namespace std;
string target, op;
int mile(int n, int t, int n_num, int num,vector<vector<vector<int>>>&m) {
	if (t == target.length() ) {
		return num - n_num;
	}
	if (m[n][t][n_num] != -1) return m[n][t][n_num];
	if (op[n] == target[t]) {
		m[n][t][n_num] = mile(n + 1, t + 1, n_num, num, m);
		return m[n][t][n_num];
	}
	if (n_num < num) {
		m[n][t][n_num] = min(mile(n + 1, t, n_num + 1, num, m) + 1, mile(n + 1, t + 1, n_num, num, m) + 1);
		return m[n][t][n_num];
	}
	else {
		m[n][t][n_num] = mile(n + 1, t + 1, n_num, num,m) + 1;
		return m[n][t][n_num];
	}
}
int main() {
	int t; cin >> t;
	while (t--) {
		string a, b; cin >> a >> b;
		vector<vector<int>>dp(a.length()+1, vector<int>(b.length()+1));
		for (int i = 0; i <= a.length(); i++) dp[i][0] = i;
		for (int i = 0; i <= b.length(); i++) dp[0][i] = i;
		for (int i = 1; i <= a.length(); i++) {
			for (int j = 1; j <= b.length(); j++) {
				if (a[i-1] == b[j-1]) dp[i][j] = dp[i - 1][j - 1];
				else {
					dp[i][j] = min(min(dp[i - 1][j - 1] + 1, dp[i - 1][j] + 1), dp[i][j - 1] + 1);
				}
			}
		}
		cout << dp[a.length()][b.length()] << endl;
	}
}
