//除了滚动数组外，觉得能做到只用计算会用上的dp
#include<iostream>
#include<vector>
using namespace std;
int main() {
	int sum, capacity;
	while (cin >> sum >> capacity) {
		vector<int>weight(sum, 0);
		vector<int>value(sum, 0);
		vector<vector<int>>dp(sum, vector<int>(capacity+1, 0));

		for (int i = 0; i < sum; i++) cin >> weight[i] >> value[i];
		for (int i = 0; i <= capacity; i++) {
			if (weight[0] <= i) dp[0][i] = value[0];
			else dp[0][i] = 0;
		}
		for (int i = 1; i < sum; i++) {
			for (int j = 1; j <= capacity; j++) {
				if (j < weight[i]) dp[i][j] = dp[i - 1][j];
				else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
			}
		}
		for (int i = 0; i < sum; i++) {
			for (int j = 0; j <= capacity; j++) {
				cout << dp[i][j]<<" ";
			}
			cout << endl;
		}
		//cout << dp[sum - 1][capacity];
	}
	
}
