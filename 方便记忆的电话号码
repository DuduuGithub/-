B:方便记忆的电话号码
描述
英文字母（除Q和Z外）和电话号码存在着对应关系，如下所示：
A,B,C -> 2
D,E,F -> 3
G,H,I -> 4
J,K,L -> 5
M,N,O -> 6
P,R,S -> 7
T,U,V -> 8
W,X,Y -> 9
标准的电话号码格式是xxx-xxxx，其中x表示0-9中的一个数字。有时为了方便记忆电话号码，我们会将电话号码的数字转变为英文字母，如把263-7422记成America。有时，我们还加上“-”作为分隔符，如把449-6753记成Hi-World。当然，我们未必要将所有的数字都转变为字母，比如474-6635可以记成iPhone-5。
总之，一个方便记忆的电话号码由数字和除Q、Z外的英文字母组成，并且可以在任意位置插入任意多的“-”符号。
现在 ，我们有一个列表，记录着许多方便记忆的电话号码。不同的方便记忆的电话号码可能对应相同的标准号码，你的任务就是找出它们。


输入
第一行是一个正整数n（n <= 100000），表示列表中的电话号码数。
其后n行，每行是一个方便记忆的电话号码，它由数字和除Q、Z外的英文字母、“-”符号组成，其中数字和字母的总数一定为7，字符串总长度不超过200。
输出
输出包括若干行，每行包括一个标准电话号码（xxx-xxxx）以及它重复出现的次数k（k >= 2），中间用空格分隔。输出的标准电话号码需按照升序排序。

如果没有重复出现的标准电话号码，则输出一行“No duplicates.”。
样例输入
12
4873279
ITS-EASY
888-4567
3-10-10-10
888-GLOP
TUT-GLOP
967-11-11
310-GINO
F101010
888-1200
-4-8-7-3-2-7-9-
487-3279
样例输出
310-1010 2
487-3279 4
888-4567 3







#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;
// 字母到数字的映射
char mapCharToDigit(char c) {
    switch (c) {
    case 'A': case 'B': case 'C':
        return '2';
    case 'D': case 'E': case 'F':
        return '3';
    case 'G': case 'H': case 'I':
        return '4';
    case 'J': case 'K': case 'L':
        return '5';
    case 'M': case 'N': case 'O':
        return '6';
    case 'P': case 'R': case 'S':
        return '7';
    case 'T': case 'U': case 'V':
        return '8';
    case 'W': case 'X': case 'Y':
        return '9';
    default:
        return c;  // 数字或其他字符
    }
}

// 转换为标准电话号码
string convertToStandard(const string& phone) {
    string result;
    for (char c : phone) {
        if (c == '-') continue;
        result.push_back(mapCharToDigit(c));
    }
    return result.substr(0, 3) + '-' + result.substr(3, 7);
}
int main() {
    int n; cin >> n;
    map<string, int>count;
    for (int i = 0; i < n; i++) {
        string x;
        cin >> x;
        count[convertToStandard(x)]++;
    }
    for (auto it = count.begin(); it != count.end(); it++) {
        if (it->second == 1) continue;
        cout << it->first << " " << it->second;
        cout << endl;
    }
}
