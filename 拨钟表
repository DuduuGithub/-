有9个时钟，排成一个3*3的矩阵。

|-------|    |-------|    |-------|
|       |    |       |    |   |   |
|---O   |    |---O   |    |   O   |
|       |    |       |    |       |
|-------|    |-------|    |-------|
    A            B            C    

|-------|    |-------|    |-------|
|       |    |       |    |       |
|   O   |    |   O   |    |   O   |
|   |   |    |   |   |    |   |   |
|-------|    |-------|    |-------|
    D            E            F    

|-------|    |-------|    |-------|
|       |    |       |    |       |
|   O   |    |   O---|    |   O   |
|   |   |    |       |    |   |   |
|-------|    |-------|    |-------|
    G            H            I    
(图 1)
现在需要用最少的移动，将9个时钟的指针都拨到12点的位置。共允许有9种不同的移动。如下表所示，每个移动会将若干个时钟的指针沿顺时针方向拨动90度。



移动    影响的时钟
 
 1         ABDE
 2         ABC
 3         BCEF
 4         ADG
 5         BDEFH
 6         CFI
 7         DEGH
 8         GHI
 9         EFHI    
输入
9个整数，表示各时钟指针的起始位置，相邻两个整数之间用单个空格隔开。其中，0=12点、1=3点、2=6点、3=9点。
输出
输出一个最短的移动序列，使得9个时钟的指针都指向12点。按照移动的序号从小到大输出结果。相邻两个整数之间用单个空格隔开。
样例输入
3 3 0 
2 2 2 
2 1 2 
样例输出
4 5 8 9 


//深搜 超时，但要求厘清思路，找好问题结构，所以还是很有必要加强巩固的
#include<iostream>
#include<set>
#include<vector>
#include<map>
using namespace std;
vector<vector<int>>Move(10,vector<int>(1,0));
vector<int>result(10,0);
int min_num = 1000;
bool judge(vector<int>& Clock) {
	for (int i = 1; i <= 9; i++)if (Clock[i] != 0) return false;
	return true;
}
void adjust(vector<int> Clock, vector<int>& record,int move_num) {
	if (judge(Clock)) {
		if (min_num > move_num) result = record;
		return;
	}
	for (int i = 1; i <= 9; i++) {
		if (record[i] == 4) continue;
		for (int j = 0; j < Move[i].size(); j++) {
			Clock[Move[i][j]] = (Clock[Move[i][j]] + 1)%4;
		}
		record[i]++;
		adjust(Clock,record,move_num+1);
		for (int j = 0; j < Move[i].size(); j++) {
			Clock[Move[i][j]] = (Clock[Move[i][j]] + 3) % 4;
		}
		record[i]--;
	}
}
int main() {
	//开头初始化只要内部不是（0,0）就行，换成一也可以；
	Move[1] = { 1,2,4,5 }; Move[2] = { 1,2,3 }; Move[3] = { 2,3,5,6 }; Move[4] = { 1,4,7 }; Move[5] = { 2,4,5,6,8 };
	Move[6] = { 3,6,9 }; Move[7] = { 4,5,7,8 }; Move[8] = { 7,8,9 }; Move[9] = { 5,6,8,9 };
	//for (int i = 1; i <= 9; i++) for (int j = 0; j < Move[i].size(); j++) cout << Move[i][j] << " ";
	vector<int> Clock(10,0);
	vector<int> cnt(10, 0);
	vector<int>path(10,0);
	vector<int>record(10, 0);
	for (int i = 1; i <= 9; i++) cin >> Clock[i];
	adjust(Clock, record, 0);
	for (int i = 1; i < 10; i++) {
		if (result[i]) cout << result[i] << " ";
	}
}


